# Generated by Django 2.2.5 on 2019-09-27 14:08

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('user_is_verified', models.BooleanField(default=True, help_text='Set to true when the user have verified its email address.', verbose_name='Verified')),
                ('user_email_verification_token', models.TextField(default='default', unique=True)),
                ('is_administrator', models.BooleanField(default=False, editable=False)),
                ('user_created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('user_updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='histories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('history_id', 'history_user_id')},
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('subscription_id', models.AutoField(primary_key=True, serialize=False)),
                ('subscription_is_active', models.BooleanField(default=False)),
                ('subscription_plan_type', models.CharField(choices=[('FREE', 'Free Plan'), ('MONTHLY', 'Monthly Basic ($3/Mo)')], default='FREE', max_length=15)),
                ('subscription_initiated_on', models.DateTimeField(blank=True, null=True)),
                ('subscription_terminated_on', models.DateTimeField(blank=True, null=True)),
                ('subscription_stripe_customer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RequestLog',
            fields=[
                ('request_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('request_log_date', models.DateField(default=datetime.datetime.today)),
                ('request_log_time', models.TimeField(default=django.utils.timezone.now)),
                ('request_log_game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requestlogs', to='api.Game')),
                ('request_log_history_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requestlogs', to='accounts.History')),
            ],
        ),
    ]
